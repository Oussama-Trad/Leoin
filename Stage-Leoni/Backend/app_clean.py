from flask import Flask, request, jsonify
from flask_cors import CORS
from pymongo import MongoClient
from bson.objectid import ObjectId
from datetime import datetime, timedelta
import bcrypt
import jwt
import re
import os
import smtplib
import random
import secrets
from dotenv import load_dotenv
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

app = Flask(__name__)
# Configuration CORS pour d√©veloppement local - Permettre toutes les origines pour le d√©veloppement
CORS(app, origins="*", methods=["GET", "POST", "PUT", "OPTIONS"], allow_headers=["*"])

# Middleware pour g√©rer les requ√™tes OPTIONS et √©viter les doublons headers CORS
@app.after_request
def after_request(response):
    # Supprimer ces headers car ils sont d√©j√† g√©r√©s par CORS(app)
    return response

# Charger les variables d'environnement
load_dotenv()
MONGODB_ATLAS_URI = os.getenv('MONGODB_URI', 'mongodb+srv://oussamatrzd19:oussama123@leoniapp.grhnzgz.mongodb.net/LeoniApp')
MONGODB_LOCAL_URI = 'mongodb://localhost:27017/LeoniApp'
JWT_SECRET_KEY = os.getenv('JWT_SECRET_KEY', '123')

# Configuration email pour la r√©initialisation de mot de passe
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
EMAIL_USER = os.getenv('EMAIL_USER', 'your-email@gmail.com')
EMAIL_PASSWORD = os.getenv('EMAIL_PASSWORD', 'your-app-password')
EMAIL_FROM = os.getenv('EMAIL_FROM', 'noreply@leoniapp.com')

# Fonction pour essayer de se connecter √† MongoDB avec fallback
def connect_to_mongodb():
    # Essayer d'abord MongoDB Atlas (cloud)
    try:
        print("üîç Tentative de connexion √† MongoDB Atlas...")
        client = MongoClient(MONGODB_ATLAS_URI, serverSelectionTimeoutMS=10000)
        client.server_info()  # Test de connexion
        print("‚úÖ Connexion MongoDB Atlas r√©ussie")
        return client, "Atlas"
    except Exception as e:
        print(f"‚ùå √âchec connexion MongoDB Atlas: {str(e)}")

    # Fallback : essayer MongoDB local
    try:
        print("üîç Tentative de connexion √† MongoDB local...")
        client = MongoClient(MONGODB_LOCAL_URI, serverSelectionTimeoutMS=5000)
        client.server_info()  # Test de connexion
        print("‚úÖ Connexion MongoDB local r√©ussie")
        return client, "Local"
    except Exception as e:
        print(f"‚ùå √âchec connexion MongoDB local: {str(e)}")

    # Si aucune connexion ne fonctionne, utiliser une base de donn√©es en m√©moire (fallback ultime)
    print("‚ö†Ô∏è Utilisation d'une base de donn√©es temporaire en m√©moire")
    return None, "Memory"

# √âtablir la connexion MongoDB
client, db_type = connect_to_mongodb()

if client:
    # Configuration de la base de donn√©es
    DATABASE_NAME = os.getenv('DATABASE_NAME', 'LeoniApp')
    USERS_COLLECTION = os.getenv('USERS_COLLECTION', 'users')
    DOCUMENTS_COLLECTION = os.getenv('DOCUMENTS_COLLECTION', 'document_requests')

    db = client[DATABASE_NAME]
    users_collection = db[USERS_COLLECTION]
    document_requests_collection = db[DOCUMENTS_COLLECTION]
    password_reset_collection = db['password_resets']
    
    # COLLECTION POUR LES TYPES DE DOCUMENTS
    document_types_collection = db['document_types']
    
    # NOUVELLES COLLECTIONS POUR NEWS & CHAT
    locations_collection = db['locations']
    departments_collection = db['departments']
    news_collection = db['news']
    news_interactions_collection = db['news_interactions']
    services_collection = db['services']
    chats_collection = db['chats']
    chat_messages_collection = db['chat_messages']

    # Cr√©er les index pour optimiser les requ√™tes (seulement si pas en m√©moire)
    try:
        users_collection.create_index([("adresse1", 1)], unique=True)
        # Index partiel pour adresse2 - unique seulement si pas null
        users_collection.create_index([("employeeId", 1)], unique=True)
        document_requests_collection.create_index([("userId", 1)])
        document_requests_collection.create_index([("status", 1)])
        password_reset_collection.create_index([("email", 1)])
        password_reset_collection.create_index([("token", 1)], unique=True)
        password_reset_collection.create_index([("expiresAt", 1)], expireAfterSeconds=0)
        print(f"‚úÖ Index cr√©√©s pour la base {db_type}")
    except Exception as index_error:
        print(f"‚ö†Ô∏è Impossible de cr√©er les index: {index_error}")

else:
    # Mode m√©moire : utiliser des dictionnaires Python comme fallback
    print("‚ö†Ô∏è Mode base de donn√©es temporaire activ√©")
    users_collection = {}
    document_requests_collection = {}
    password_reset_collection = {}
    db_type = "Memory"

# Validation de l'email
def is_valid_email(email):
    email_regex = r'^[^\s@]+@[^\s@]+\.[^\s@]+$'
    return re.match(email_regex, email) is not None

# Fonction pour envoyer un email
def send_email(to_email, subject, body):
    try:
        msg = MIMEMultipart()
        msg['From'] = EMAIL_FROM
        msg['To'] = to_email
        msg['Subject'] = subject

        msg.attach(MIMEText(body, 'html'))

        server = smtplib.SMTP(EMAIL_HOST, EMAIL_PORT)
        server.starttls()
        server.login(EMAIL_USER, EMAIL_PASSWORD)
        text = msg.as_string()
        server.sendmail(EMAIL_FROM, to_email, text)
        server.quit()

        return True
    except Exception as e:
        print(f"Erreur envoi email: {e}")
        return False

# G√©n√©rer un token de r√©initialisation
def generate_reset_token():
    return secrets.token_urlsafe(32)

# Validation du num√©ro de t√©l√©phone
def is_valid_phone(phone):
    # Accepter les formats internationaux et locaux
    phone_regex = r'^\+?[\d\s\-\(\)]{8,15}$'
    return re.match(phone_regex, phone.strip()) is not None

# Validation de l'employeeId (8 chiffres)
def is_valid_employee_id(employee_id):
    if not employee_id:
        return True  # employeeId est optionnel
    employee_id_regex = r'^\d{8}$'
    return re.match(employee_id_regex, str(employee_id).strip()) is not None

# G√©n√©rer un employeeId unique (nombre √† 8 chiffres)
def generate_employee_id():
    try:
        # Trouver le plus grand employeeId existant
        existing_ids = users_collection.find({}, {'employeeId': 1}).sort('employeeId', -1).limit(1)
        
        max_id = 10000000  # Commencer √† 10000000 (8 chiffres)
        
        for user in existing_ids:
            employee_id = user.get('employeeId', '')
            # Si c'est un nombre, le convertir
            if employee_id.isdigit() and len(employee_id) == 8:
                max_id = max(max_id, int(employee_id) + 1)
            elif employee_id.startswith('EMP'):
                # Migration des anciens IDs - ignorer ou convertir
                continue
        
        # V√©rifier que l'ID n'existe pas d√©j√†
        employee_id = str(max_id)
        while users_collection.find_one({'employeeId': employee_id}):
            max_id += 1
            employee_id = str(max_id)
        
        return employee_id
    except Exception as e:
        print(f"Erreur lors de la g√©n√©ration de l'employeeId: {e}")
        # Fallback: g√©n√©rer un ID bas√© sur timestamp
        timestamp_id = str(int(datetime.now().timestamp()))[-8:]
        random_suffix = str(random.randint(10, 99))
        return timestamp_id[:6] + random_suffix

# Middleware pour v√©rifier le token JWT
def verify_token(token):
    try:
        decoded = jwt.decode(token, JWT_SECRET_KEY, algorithms=['HS256'])
        return decoded
    except jwt.ExpiredSignatureError:
        return None
    except jwt.InvalidTokenError:
        return None

# Route pour tester la connexion
@app.route('/health', methods=['GET'])
def health_check():
    try:
        mongodb_status = "D√©connect√©"

        if client:
            try:
                client.server_info()
                mongodb_status = f"Connect√© ({db_type})"
            except:
                mongodb_status = f"Erreur ({db_type})"
        else:
            mongodb_status = "Mode m√©moire temporaire"

        return jsonify({
            'success': True,
            'message': 'Serveur en ligne',
            'mongodb': mongodb_status,
            'database_type': db_type,
            'timestamp': datetime.now().isoformat()
        }), 200
    except Exception as e:
        return jsonify({
            'success': False,
            'message': 'Erreur serveur',
            'error': str(e)
        }), 500

# Route pour l'inscription
@app.route('/register', methods=['POST'])
def register():
    try:
        data = request.get_json()
        
        print(f"üîç DEBUG REGISTER - Donn√©es re√ßues: {data}", flush=True)
        
        if not data:
            return jsonify({'success': False, 'message': 'Donn√©es manquantes'}), 400
        
        # Support des anciens et nouveaux noms de champs
        # Convertir les anciens noms vers les nouveaux noms uniquement
        if 'email' in data and 'adresse1' not in data:
            data['adresse1'] = data['email']
        if 'parentalEmail' in data and 'adresse2' not in data:
            data['adresse2'] = data['parentalEmail']
        
        # Utiliser les nouveaux noms de champs comme standard
        required_fields = ['firstName', 'lastName', 'adresse1', 'adresse2', 'phoneNumber', 'parentalPhoneNumber', 'password', 'confirmPassword', 'location', 'department']
        
        print(f"üîç DEBUG REGISTER - Champs requis: {required_fields}", flush=True)
        print(f"üîç DEBUG REGISTER - Champs re√ßus: {list(data.keys())}", flush=True)
        
        # V√©rifier que tous les champs requis sont pr√©sents
        missing_fields = [field for field in required_fields if field not in data or not data[field].strip()]
        if missing_fields:
            print(f"‚ùå DEBUG REGISTER - Champs manquants: {missing_fields}", flush=True)
            return jsonify({
                'success': False, 
                'message': f'Champs manquants: {", ".join(missing_fields)}'
            }), 400

        # Validation des donn√©es
        if not is_valid_email(data['adresse1']):
            return jsonify({'success': False, 'message': 'Format adresse1 invalide'}), 400
        
        if not is_valid_email(data['adresse2']):
            return jsonify({'success': False, 'message': 'Format adresse2 invalide'}), 400
        
        if data['adresse1'].lower() == data['adresse2'].lower():
            return jsonify({'success': False, 'message': 'Les adresses doivent √™tre diff√©rentes'}), 400
        
        if not is_valid_phone(data['phoneNumber']):
            return jsonify({'success': False, 'message': 'Format num√©ro de t√©l√©phone personnel invalide'}), 400
        
        if not is_valid_phone(data['parentalPhoneNumber']):
            return jsonify({'success': False, 'message': 'Format num√©ro de t√©l√©phone parental invalide'}), 400
        
        # Validation employeeId si fourni
        if data.get('employeeId') and not is_valid_employee_id(data['employeeId']):
            return jsonify({'success': False, 'message': 'L\'ID employ√© doit √™tre un nombre √† 8 chiffres'}), 400
        
        if data['password'] != data['confirmPassword']:
            return jsonify({'success': False, 'message': 'Les mots de passe ne correspondent pas'}), 400
        
        if len(data['password']) < 6:
            return jsonify({'success': False, 'message': 'Le mot de passe doit contenir au moins 6 caract√®res'}), 400

        # Validation des location et department
        try:
            location_name = data.get('location')
            department_name = data.get('department')
            
            # V√©rifier si le d√©partement existe pour cette localisation
            department = departments_collection.find_one({
                "name": department_name,
                "location": location_name
            })
            
            if not department:
                return jsonify({'success': False, 'message': 'D√©partement non trouv√© pour cette localisation'}), 400
                
        except Exception as e:
            return jsonify({'success': False, 'message': 'Erreur de validation des donn√©es de localisation'}), 400

        # V√©rifier si l'email existe d√©j√†
        if users_collection.find_one({'adresse1': data['adresse1'].lower()}):
            return jsonify({'success': False, 'message': 'Un compte avec cette adresse1 existe d√©j√†'}), 400
        
        if users_collection.find_one({'adresse2': data['adresse2'].lower()}):
            return jsonify({'success': False, 'message': 'Un compte avec cette adresse2 existe d√©j√†'}), 400

        # Hacher le mot de passe
        hashed_password = bcrypt.hashpw(data['password'].encode('utf-8'), bcrypt.gensalt())

        # G√©n√©rer un employeeId unique
        employee_id = generate_employee_id()

        # Cr√©er l'utilisateur
        user = {
            'firstName': data['firstName'].strip(),
            'lastName': data['lastName'].strip(),
            'adresse1': data['adresse1'].lower().strip(),
            'adresse2': data['adresse2'].lower().strip(),
            'phoneNumber': data['phoneNumber'].strip(),
            'parentalPhoneNumber': data['parentalPhoneNumber'].strip(),
            'password': hashed_password,
            'employeeId': employee_id,
            'department': data['department'],  # Nom du d√©partement
            'position': 'Non sp√©cifi√©',
            'location': data['location'],  # Nom de la location
            'profilePicture': None,  # Ajout du champ photo de profil
            'role': 'EMPLOYEE',  # R√¥le par d√©faut
            'createdAt': datetime.now(),
            'updatedAt': datetime.now()
        }

        # Ins√©rer l'utilisateur dans la base de donn√©es
        result = users_collection.insert_one(user)
        
        # V√©rifier que l'insertion a r√©ussi
        if not result.inserted_id:
            return jsonify({'success': False, 'message': 'Erreur lors de la cr√©ation du compte'}), 500

        # G√©n√©rer un token JWT
        token = jwt.encode({
            '_id': str(result.inserted_id),
            'user_id': str(result.inserted_id),  # Standardis√©
            'userId': str(result.inserted_id),  # Keep for backwards compatibility
            'adresse1': user['adresse1'],
            'exp': datetime.now() + timedelta(hours=24)
        }, JWT_SECRET_KEY, algorithm='HS256')

        print(f"‚úÖ Nouvel utilisateur cr√©√©: {user['adresse1']} (ID: {employee_id})")

        return jsonify({
            'success': True,
            'message': 'Inscription r√©ussie',
            'user': {
                'id': str(result.inserted_id),
                'firstName': user['firstName'],
                'lastName': user['lastName'],
                'adresse1': user['adresse1'],
                'adresse2': user['adresse2'],
                'phoneNumber': user['phoneNumber'],
                'parentalPhoneNumber': user['parentalPhoneNumber'],
                'employeeId': user['employeeId'],
                'department': user['department'],
                'location': user['location']
            },
            'token': token
        }), 201

    except Exception as e:
        print(f"‚ùå Erreur lors de l'inscription: {e}")
        return jsonify({
            'success': False, 
            'message': 'Erreur serveur lors de l\'inscription',
            'error': str(e)
        }), 500

# Route pour la connexion
@app.route('/login', methods=['POST', 'OPTIONS'])
def login():
    if request.method == 'OPTIONS':
        response = jsonify({'success': True})
        return response

    print("üîç LOGIN: Requ√™te re√ßue", flush=True)

    try:
        data = request.get_json()
        print(f"üîç LOGIN: Donn√©es = {data}", flush=True)

        if not data:
            print("‚ùå LOGIN: Pas de donn√©es JSON", flush=True)
            return jsonify({'success': False, 'message': 'Donn√©es manquantes'}), 400

        if 'adresse1' not in data or 'password' not in data:
            print("‚ùå LOGIN: Adresse1 ou password manquant", flush=True)
            return jsonify({'success': False, 'message': 'Adresse1 et mot de passe requis'}), 400

        adresse1 = data['adresse1'].lower().strip()
        password = data['password']

        print(f"üîç LOGIN: Recherche user {adresse1}", flush=True)
        user = users_collection.find_one({'adresse1': adresse1})

        if not user:
            print("‚ùå LOGIN: User non trouv√©", flush=True)
            return jsonify({'success': False, 'message': 'Adresse1 ou mot de passe incorrect'}), 401

        print("üîç LOGIN: User trouv√©, v√©rif password", flush=True)
        
        # S'assurer que le password stock√© est en bytes
        stored_password = user['password']
        if isinstance(stored_password, str):
            # Si c'est une string, la convertir en bytes
            stored_password = stored_password.encode('utf-8')
        
        print(f"üîç LOGIN: Type password stock√© = {type(stored_password)}", flush=True)

        if not bcrypt.checkpw(password.encode('utf-8'), stored_password):
            print("‚ùå LOGIN: Password incorrect", flush=True)
            return jsonify({'success': False, 'message': 'Adresse1 ou mot de passe incorrect'}), 401

        print("üîç LOGIN: Password OK, g√©n√©ration token", flush=True)

        # Token JWT simple
        token = jwt.encode({
            '_id': str(user['_id']),
            'user_id': str(user['_id']),  # Standardis√© pour tous les endpoints
            'adresse1': user['adresse1'],
            'exp': datetime.now() + timedelta(hours=24)
        }, JWT_SECRET_KEY, algorithm='HS256')

        print("‚úÖ LOGIN: Succ√®s", flush=True)

        return jsonify({
            'success': True,
            'message': 'Connexion r√©ussie',
            'user': {
                'id': str(user['_id']),
                'firstName': user.get('firstName', ''),
                'lastName': user.get('lastName', ''),
                'adresse1': user['adresse1'],
                'employeeId': user.get('employeeId', ''),
                'location': user.get('location', 'Non sp√©cifi√©'),
                'department': user.get('department', 'Non sp√©cifi√©'),
                'role': user.get('role', 'EMPLOYEE')
            },
            'token': token
        })

    except Exception as e:
        print(f"‚ùå LOGIN: Exception = {str(e)}", flush=True)
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'message': 'Erreur serveur'
        }), 500

# Route pour r√©cup√©rer les informations du profil utilisateur connect√©
@app.route('/me', methods=['GET', 'OPTIONS'])
def get_current_user():
    if request.method == 'OPTIONS':
        response = jsonify({'success': True})
        response.headers.add('Access-Control-Allow-Origin', '*')
        response.headers.add('Access-Control-Allow-Headers', '*')
        response.headers.add('Access-Control-Allow-Methods', '*')
        return response

    print("üîç GET_ME: Requ√™te re√ßue", flush=True)
    try:
        # V√©rifier le token
        auth_header = request.headers.get('Authorization')
        if not auth_header or not auth_header.startswith('Bearer '):
            print("‚ùå GET_ME: Token manquant", flush=True)
            return jsonify({'success': False, 'message': 'Token manquant ou invalide'}), 401

        token = auth_header.split(' ')[1]
        payload = verify_token(token)

        if not payload:
            print("‚ùå GET_ME: Token invalide", flush=True)
            return jsonify({'success': False, 'message': 'Token invalide ou expir√©'}), 401

        print(f"üîç GET_ME: Token d√©cod√© = {payload}", flush=True)

        # Utiliser user_id du payload
        user_id = payload.get('user_id') or payload.get('_id')
        print(f"üîç GET_ME: Recherche user avec ID = {user_id}", flush=True)

        # R√©cup√©rer l'utilisateur depuis la base de donn√©es
        user = users_collection.find_one({
            '_id': ObjectId(user_id)
        }, {'password': 0})  # Exclure le mot de passe

        if not user:
            print("‚ùå GET_ME: Utilisateur non trouv√©", flush=True)
            return jsonify({'success': False, 'message': 'Utilisateur non trouv√©'}), 404

        # Utiliser directement les champs department et location s'ils existent
        user_data = {
            '_id': str(user['_id']),
            'id': str(user['_id']),
            'firstName': user.get('firstName', ''),
            'lastName': user.get('lastName', ''),
            'adresse1': user.get('adresse1', ''),
            'phoneNumber': user.get('phoneNumber', ''),
            'adresse2': user.get('adresse2', ''),
            'parentalPhoneNumber': user.get('parentalPhoneNumber', ''),
            'employeeId': user.get('employeeId', ''),
            'department': user.get('department', 'Non sp√©cifi√©'),
            'location': user.get('location', 'Non sp√©cifi√©'),
            'position': user.get('position', 'Non sp√©cifi√©'),
            'profilePicture': user.get('profilePicture'),
            'role': user.get('role', 'EMPLOYEE'),  # Nouveau champ pour les r√¥les
            'createdAt': user.get('createdAt'),
            'updatedAt': user.get('updatedAt')
        }
        
        print(f"‚úÖ GET_ME: D√©partement final = {user_data['department']}")
        print(f"‚úÖ GET_ME: Location finale = {user_data['location']}")

        print(f"‚úÖ GET_ME: Succ√®s - Location: {user_data['location']}, D√©partement: {user_data['department']}", flush=True)
        return jsonify({
            'success': True,
            'user': user_data
        })

    except jwt.ExpiredSignatureError:
        print("‚ùå GET_ME: Token expir√©", flush=True)
        return jsonify({'success': False, 'message': 'Session expir√©e'}), 401
    except Exception as e:
        print(f"‚ùå GET_ME: Exception = {str(e)}", flush=True)
        import traceback
        traceback.print_exc()
        return jsonify({'success': False, 'message': 'Erreur serveur'}), 500

# ==============================================
# ENREGISTREMENT DES ROUTES EXTERNES
# ==============================================

# Enregistrer les routes des modules externes
try:
    from news_routes_simple import register_news_routes_simple
    print("üì∞ Enregistrement des nouvelles routes News simplifi√©es...")
    register_news_routes_simple(app, db, users_collection, news_collection, verify_token)
    print("‚úÖ Routes News simplifi√©es enregistr√©es")
    
    from news_chat_routes_fixed import register_chat_routes
    print("üí¨ Enregistrement des routes Chat...")
    register_chat_routes(app, db, users_collection, chats_collection, chat_messages_collection, verify_token)
    print("‚úÖ Routes Chat enregistr√©es avec succ√®s")
    
    from admin_routes import register_admin_routes
    register_admin_routes(app, db, users_collection, document_requests_collection, verify_token)
    print("‚úÖ Routes admin enregistr√©es avec succ√®s")
    
    print("‚úÖ Routes News simplifi√©es, Chat et Admin enregistr√©es avec succ√®s")
    
except ImportError as e:
    print(f"‚ö†Ô∏è Erreur d'import des routes: {e}")
    print("üì∞ Fonctionnement avec routes de base seulement")

if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    try:
        print(f"üöÄ Serveur d√©marr√© sur le port {port}")
        app.run(debug=False, host='0.0.0.0', port=port, threaded=True)
    except KeyboardInterrupt:
        print("\nArr√™t du serveur...")
    except Exception as e:
        print(f"‚ùå Erreur du serveur: {e}")
