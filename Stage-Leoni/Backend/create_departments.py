#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script pour cr√©er les d√©partements manquants dans chaque location
"""

from pymongo import MongoClient
from bson import ObjectId
import os
from datetime import datetime

def connect_to_mongodb():
    """Connexion √† MongoDB Atlas"""
    try:
        # URL de connexion MongoDB Atlas
        MONGODB_URI = "mongodb+srv://oussamatrzd19:oussama123@leoniapp.grhnzgz.mongodb.net/LeoniApp"
        
        client = MongoClient(MONGODB_URI)
        db = client['LeoniApp']
        
        # Test de connexion
        client.admin.command('ping')
        print("‚úÖ Connexion MongoDB Atlas r√©ussie")
        
        return db
    except Exception as e:
        print(f"‚ùå Erreur de connexion MongoDB: {e}")
        return None

def create_departments():
    """Cr√©er les d√©partements standard pour chaque location"""
    print("üè≠ Cr√©ation des d√©partements standard")
    print("=" * 60)
    
    db = connect_to_mongodb()
    if not db:
        return
    
    # D√©partements standard √† cr√©er
    departments_to_create = [
        "IT",
        "RH", 
        "Production",
        "Qualit√©",
        "Maintenance",
        "Logistique",
        "Administration",
        "S√©curit√©"
    ]
    
    # R√©cup√©rer toutes les locations
    locations = list(db.locations.find({}))
    print(f"üìç {len(locations)} locations trouv√©es")
    
    for location in locations:
        location_id = location['_id']
        location_name = location.get('name', 'Unknown')
        
        print(f"\nüè¢ Cr√©ation des d√©partements pour: {location_name}")
        print("-" * 40)
        
        departments_created = 0
        
        for dept_name in departments_to_create:
            # V√©rifier si le d√©partement existe d√©j√†
            existing_dept = db.departments.find_one({
                'name': dept_name,
                'locationId': location_id
            })
            
            if existing_dept:
                print(f"   ‚ö†Ô∏è  {dept_name} existe d√©j√†")
                continue
            
            # Cr√©er le nouveau d√©partement
            new_department = {
                '_id': ObjectId(),
                'name': dept_name,
                'locationId': location_id,
                'createdAt': datetime.utcnow(),
                'updatedAt': datetime.utcnow()
            }
            
            try:
                result = db.departments.insert_one(new_department)
                if result.inserted_id:
                    print(f"   ‚úÖ {dept_name} cr√©√© (ID: {result.inserted_id})")
                    departments_created += 1
                else:
                    print(f"   ‚ùå √âchec cr√©ation {dept_name}")
            except Exception as e:
                print(f"   ‚ùå Erreur cr√©ation {dept_name}: {e}")
        
        print(f"   üìä {departments_created} d√©partements cr√©√©s pour {location_name}")
    
    print(f"\nüéâ Cr√©ation des d√©partements termin√©e!")

def show_final_structure():
    """Afficher la structure finale des locations et d√©partements"""
    print("\nüìã Structure finale des locations et d√©partements")
    print("=" * 60)
    
    db = connect_to_mongodb()
    if not db:
        return
    
    locations = list(db.locations.find({}))
    
    for location in locations:
        location_id = location['_id']
        location_name = location.get('name', 'Unknown')
        
        departments = list(db.departments.find({'locationId': location_id}))
        
        print(f"\nüè¢ {location_name}")
        print(f"   ID: {location_id}")
        print(f"   üìã D√©partements ({len(departments)}):")
        
        for dept in departments:
            print(f"      ‚Ä¢ {dept['name']} (ID: {dept['_id']})")

if __name__ == "__main__":
    print("üè≠ Cr√©ation des d√©partements pour toutes les locations")
    print("=" * 60)
    
    create_departments()
    show_final_structure()
