#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script pour d√©boguer les d√©partements dans la base de donn√©es
"""

from pymongo import MongoClient
from datetime import datetime
import os
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

# Configuration MongoDB
MONGODB_ATLAS_URI = os.getenv('MONGODB_URI', 'mongodb+srv://oussamatrzd19:oussama123@leoniapp.grhnzgz.mongodb.net/LeoniApp')

def connect_to_mongodb():
    try:
        print("üîç Connexion √† MongoDB Atlas...")
        client = MongoClient(MONGODB_ATLAS_URI, serverSelectionTimeoutMS=10000)
        client.server_info()  # Test de connexion
        print("‚úÖ Connexion MongoDB Atlas r√©ussie")
        return client
    except Exception as e:
        print(f"‚ùå Erreur de connexion MongoDB: {e}")
        return None

def debug_departments():
    client = connect_to_mongodb()
    if not client:
        return False
    
    db = client['LeoniApp']
    departments_collection = db['departments']
    locations_collection = db['locations']
    
    print("\nüîç Analyse des d√©partements...")
    print("=" * 60)
    
    # R√©cup√©rer tous les d√©partements
    departments = list(departments_collection.find({}))
    
    print(f"üìä Nombre total de d√©partements: {len(departments)}")
    
    if len(departments) == 0:
        print("‚ùå AUCUN D√âPARTEMENT TROUV√â dans la collection!")
        print("üîß Cela explique pourquoi les dropdowns sont vides.")
    else:
        print("\nüìã Liste des d√©partements:")
        for i, dept in enumerate(departments, 1):
            print(f"\nüè¢ D√©partement {i}:")
            print(f"   ‚Ä¢ ID: {dept.get('_id', 'N/A')}")
            print(f"   ‚Ä¢ Nom: {dept.get('name', 'N/A')}")
            print(f"   ‚Ä¢ Code: {dept.get('code', 'N/A')}")
            print(f"   ‚Ä¢ LocationRef: {dept.get('locationRef', 'N/A')}")
            print(f"   ‚Ä¢ Active: {dept.get('active', 'N/A')}")
            print(f"   ‚Ä¢ Tous les champs: {list(dept.keys())}")
            
            # V√©rifier la location associ√©e
            if dept.get('locationRef'):
                location = locations_collection.find_one({'_id': dept['locationRef']})
                if location:
                    print(f"   ‚úÖ Location associ√©e: {location['name']}")
                else:
                    print(f"   ‚ùå Location NOT FOUND pour ID: {dept['locationRef']}")
    
    # V√©rifier les locations aussi
    print(f"\nüåç Analyse des locations...")
    locations = list(locations_collection.find({}))
    print(f"üìä Nombre total de locations: {len(locations)}")
    
    for location in locations:
        print(f"üìç Location: {location.get('name', 'N/A')} (ID: {location.get('_id', 'N/A')})")
        
        # Compter les d√©partements pour cette location
        dept_count = departments_collection.count_documents({'locationRef': location['_id']})
        print(f"   ‚Üí {dept_count} d√©partements associ√©s")
    
    client.close()
    return True

if __name__ == "__main__":
    print("üîç Debug des d√©partements")
    print("=" * 60)
    
    debug_departments()
