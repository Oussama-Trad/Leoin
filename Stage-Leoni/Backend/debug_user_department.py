#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pymongo
from pymongo import MongoClient
from bson import ObjectId
import sys

def debug_user_department():
    try:
        # Connexion √† MongoDB
        client = MongoClient('mongodb+srv://oussamatrad40:KAKdUhxKcJfANHQ7@cluster0.0q6fb.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0')
        db = client['leoniApp']
        
        # Chercher l'utilisateur avec l'email
        user = db.users.find_one({'email': 'hh@gmail.com'})
        
        if user:
            print('üîç === DIAGNOSTIC D√âPARTEMENT UTILISATEUR ===')
            print(f'   - ID utilisateur: {user["_id"]}')
            print(f'   - Email: {user["email"]}')
            print(f'   - Pr√©nom: {user.get("firstName", "Non d√©fini")}')
            print(f'   - Nom: {user.get("lastName", "Non d√©fini")}')
            print()
            
            print('üè¢ === INFORMATIONS D√âPARTEMENT ===')
            print(f'   - Champ "department": "{user.get("department", "VIDE")}"')
            print(f'   - Champ "departmentRef": "{user.get("departmentRef", "VIDE")}"')
            print(f'   - Type departmentRef: {type(user.get("departmentRef", "VIDE"))}')
            print()
            
            print('üè≠ === INFORMATIONS LOCATION ===')
            print(f'   - Champ "location": "{user.get("location", "VIDE")}"')
            print(f'   - Champ "locationRef": "{user.get("locationRef", "VIDE")}"')
            print(f'   - Type locationRef: {type(user.get("locationRef", "VIDE"))}')
            print()
            
            # V√©rifier si departmentRef pointe vers un d√©partement valide
            if user.get('departmentRef'):
                try:
                    print('üîç === RECHERCHE DU D√âPARTEMENT R√âF√âRENC√â ===')
                    dept_id = ObjectId(user['departmentRef']) if isinstance(user['departmentRef'], str) else user['departmentRef']
                    department = db.departments.find_one({'_id': dept_id})
                    
                    if department:
                        print(f'‚úÖ D√©partement trouv√©:')
                        print(f'   - ID: {department["_id"]}')
                        print(f'   - Nom: {department.get("name", "Non d√©fini")}')
                        print(f'   - Code: {department.get("code", "Non d√©fini")}')
                        print(f'   - LocationRef: {department.get("locationRef", "Non d√©fini")}')
                        print(f'   - Actif: {department.get("isActive", "Non d√©fini")}')
                    else:
                        print(f'‚ùå D√©partement avec ID {dept_id} non trouv√©!')
                        
                        # Chercher tous les d√©partements pour voir ce qui existe
                        print('\nüîç === D√âPARTEMENTS DISPONIBLES ===')
                        all_depts = list(db.departments.find({'isActive': True}).limit(5))
                        for dept in all_depts:
                            print(f'   - {dept["_id"]}: {dept.get("name", "Sans nom")} ({dept.get("code", "Sans code")})')
                            
                except Exception as e:
                    print(f'‚ùå Erreur lors de la recherche du d√©partement: {e}')
            else:
                print('‚ö†Ô∏è Aucune r√©f√©rence de d√©partement trouv√©e')
                
            # V√©rifier si locationRef pointe vers une location valide
            if user.get('locationRef'):
                try:
                    print('\nüîç === RECHERCHE DE LA LOCATION R√âF√âRENC√âE ===')
                    loc_id = ObjectId(user['locationRef']) if isinstance(user['locationRef'], str) else user['locationRef']
                    location = db.locations.find_one({'_id': loc_id})
                    
                    if location:
                        print(f'‚úÖ Location trouv√©e:')
                        print(f'   - ID: {location["_id"]}')
                        print(f'   - Nom: {location.get("name", "Non d√©fini")}')
                        print(f'   - Code: {location.get("code", "Non d√©fini")}')
                        print(f'   - Active: {location.get("isActive", "Non d√©fini")}')
                    else:
                        print(f'‚ùå Location avec ID {loc_id} non trouv√©e!')
                        
                except Exception as e:
                    print(f'‚ùå Erreur lors de la recherche de la location: {e}')
            else:
                print('‚ö†Ô∏è Aucune r√©f√©rence de location trouv√©e')
                
            print('\nüîç === STRUCTURE COMPL√àTE UTILISATEUR ===')
            for key, value in user.items():
                if key != '_id':
                    print(f'   - {key}: {value} ({type(value).__name__})')
                    
        else:
            print('‚ùå Utilisateur avec email hh@gmail.com non trouv√©')
            
            # Chercher tous les utilisateurs pour voir ce qui existe
            print('\nüîç === UTILISATEURS DISPONIBLES ===')
            all_users = list(db.users.find({}, {'email': 1, 'firstName': 1, 'lastName': 1}).limit(5))
            for user in all_users:
                print(f'   - {user.get("email", "Sans email")}: {user.get("firstName", "?")} {user.get("lastName", "?")}')

        client.close()
        
    except Exception as e:
        print(f'‚ùå Erreur de connexion √† la base de donn√©es: {e}')
        return False
    
    return True

if __name__ == "__main__":
    debug_user_department()
