#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import connect_to_mongodb
from bson import ObjectId

def debug_user_department():
    try:
        # Utiliser la fonction de connexion de app.py
        client, connection_type = connect_to_mongodb()
        db = client['leoniApp']
        
        print(f'üì° Connexion {connection_type} √©tablie')
        
        # Chercher l'utilisateur avec l'email
        user = db.users.find_one({'email': 'hh@gmail.com'})
        
        if user:
            print('\nüîç === DIAGNOSTIC D√âPARTEMENT UTILISATEUR ===')
            print(f'   - ID utilisateur: {user["_id"]}')
            print(f'   - Email: {user["email"]}')
            print(f'   - Pr√©nom: {user.get("firstName", "Non d√©fini")}')
            print(f'   - Nom: {user.get("lastName", "Non d√©fini")}')
            print()
            
            print('üè¢ === INFORMATIONS D√âPARTEMENT ===')
            department_field = user.get("department", "VIDE")
            departmentRef_field = user.get("departmentRef", "VIDE")
            
            print(f'   - Champ "department": "{department_field}"')
            print(f'   - Champ "departmentRef": "{departmentRef_field}"')
            print(f'   - Type departmentRef: {type(departmentRef_field)}')
            
            # Probl√®me identifi√© : le champ "department" pourrait √™tre vide
            if not department_field or department_field == "VIDE":
                print('‚ùå PROBL√àME: Le champ "department" est vide!')
                print('   ‚Üí C\'est pourquoi "Non renseign√©" appara√Æt dans le profil')
            else:
                print(f'‚úÖ Le champ "department" contient: "{department_field}"')
            print()
            
            print('üè≠ === INFORMATIONS LOCATION ===')
            location_field = user.get("location", "VIDE")
            locationRef_field = user.get("locationRef", "VIDE")
            
            print(f'   - Champ "location": "{location_field}"')
            print(f'   - Champ "locationRef": "{locationRef_field}"')
            print(f'   - Type locationRef: {type(locationRef_field)}')
            
            if not location_field or location_field == "VIDE":
                print('‚ùå PROBL√àME: Le champ "location" est vide!')
            else:
                print(f'‚úÖ Le champ "location" contient: "{location_field}"')
            print()
            
            # V√©rifier si departmentRef pointe vers un d√©partement valide
            if departmentRef_field and departmentRef_field != "VIDE":
                try:
                    print('üîç === RECHERCHE DU D√âPARTEMENT R√âF√âRENC√â ===')
                    dept_id = ObjectId(departmentRef_field) if isinstance(departmentRef_field, str) else departmentRef_field
                    department = db.departments.find_one({'_id': dept_id})
                    
                    if department:
                        dept_name = department.get("name", "Non d√©fini")
                        print(f'‚úÖ D√©partement trouv√©:')
                        print(f'   - ID: {department["_id"]}')
                        print(f'   - Nom: {dept_name}')
                        print(f'   - Code: {department.get("code", "Non d√©fini")}')
                        print(f'   - LocationRef: {department.get("locationRef", "Non d√©fini")}')
                        print(f'   - Actif: {department.get("isActive", "Non d√©fini")}')
                        
                        # SOLUTION: Mettre √† jour le champ "department" avec le nom
                        if not department_field or department_field == "VIDE":
                            print(f'\nüîß === SOLUTION PROPOS√âE ===')
                            print(f'   Mettre √† jour user.department = "{dept_name}"')
                            
                            # Mettre √† jour l'utilisateur
                            result = db.users.update_one(
                                {'_id': user['_id']},
                                {'$set': {'department': dept_name}}
                            )
                            
                            if result.modified_count > 0:
                                print(f'‚úÖ Champ "department" mis √† jour avec succ√®s!')
                                print(f'   ‚Üí Le profil devrait maintenant afficher: "{dept_name}"')
                            else:
                                print(f'‚ùå √âchec de la mise √† jour')
                        
                    else:
                        print(f'‚ùå D√©partement avec ID {dept_id} non trouv√©!')
                        
                        # Chercher tous les d√©partements pour voir ce qui existe
                        print('\nüîç === D√âPARTEMENTS DISPONIBLES ===')
                        all_depts = list(db.departments.find({'isActive': True}).limit(5))
                        for dept in all_depts:
                            print(f'   - {dept["_id"]}: {dept.get("name", "Sans nom")} ({dept.get("code", "Sans code")})')
                            
                except Exception as e:
                    print(f'‚ùå Erreur lors de la recherche du d√©partement: {e}')
            else:
                print('‚ö†Ô∏è Aucune r√©f√©rence de d√©partement trouv√©e')
                
            # V√©rifier locationRef aussi
            if locationRef_field and locationRef_field != "VIDE":
                try:
                    print('\nüîç === RECHERCHE DE LA LOCATION R√âF√âRENC√âE ===')
                    loc_id = ObjectId(locationRef_field) if isinstance(locationRef_field, str) else locationRef_field
                    location = db.locations.find_one({'_id': loc_id})
                    
                    if location:
                        loc_name = location.get("name", "Non d√©fini")
                        print(f'‚úÖ Location trouv√©e:')
                        print(f'   - ID: {location["_id"]}')
                        print(f'   - Nom: {loc_name}')
                        print(f'   - Code: {location.get("code", "Non d√©fini")}')
                        print(f'   - Active: {location.get("isActive", "Non d√©fini")}')
                        
                        # SOLUTION: Mettre √† jour le champ "location" avec le nom
                        if not location_field or location_field == "VIDE":
                            print(f'\nüîß === SOLUTION LOCATION ===')
                            print(f'   Mettre √† jour user.location = "{loc_name}"')
                            
                            # Mettre √† jour l'utilisateur
                            result = db.users.update_one(
                                {'_id': user['_id']},
                                {'$set': {'location': loc_name}}
                            )
                            
                            if result.modified_count > 0:
                                print(f'‚úÖ Champ "location" mis √† jour avec succ√®s!')
                                print(f'   ‚Üí Le profil devrait maintenant afficher: "{loc_name}"')
                            else:
                                print(f'‚ùå √âchec de la mise √† jour location')
                        
                    else:
                        print(f'‚ùå Location avec ID {loc_id} non trouv√©e!')
                        
                except Exception as e:
                    print(f'‚ùå Erreur lors de la recherche de la location: {e}')
            else:
                print('‚ö†Ô∏è Aucune r√©f√©rence de location trouv√©e')
                
        else:
            print('‚ùå Utilisateur avec email hh@gmail.com non trouv√©')
            
            # Chercher tous les utilisateurs pour voir ce qui existe
            print('\nüîç === UTILISATEURS DISPONIBLES ===')
            all_users = list(db.users.find({}, {'email': 1, 'firstName': 1, 'lastName': 1}).limit(5))
            for user in all_users:
                print(f'   - {user.get("email", "Sans email")}: {user.get("firstName", "?")} {user.get("lastName", "?")}')

        client.close()
        
    except Exception as e:
        print(f'‚ùå Erreur de connexion √† la base de donn√©es: {e}')
        return False
    
    return True

if __name__ == "__main__":
    debug_user_department()
