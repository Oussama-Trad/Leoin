#!/usr/bin/env python3
"""
Script pour supprimer et recr√©er la collection departments
avec la structure demand√©e : d√©partements li√©s aux locations par nom
"""

import os
from pymongo import MongoClient
from datetime import datetime

# Configuration MongoDB
MONGO_URI = os.getenv('MONGODB_URI', 'mongodb+srv://oussamatrzd19:oussama123@leoniapp.grhnzgz.mongodb.net/LeoniApp')

def main():
    try:
        # Connexion √† MongoDB
        print("üîó Connexion √† MongoDB...")
        client = MongoClient(MONGO_URI)
        db = client.LeoniApp
        
        # Test de connexion
        client.admin.command('ping')
        print("‚úÖ Connexion MongoDB r√©ussie")
        
        # Supprimer l'ancienne collection departments
        print("üóëÔ∏è Suppression de l'ancienne collection departments...")
        db.departments.drop()
        print("‚úÖ Collection departments supprim√©e")
        
        # D√©finir les d√©partements par localisation
        departments_data = [
            # Messadine
            {"name": "Maintenance", "location": "Messadine", "active": True, "createdAt": datetime.utcnow(), "updatedAt": datetime.utcnow()},
            {"name": "Production", "location": "Messadine", "active": True, "createdAt": datetime.utcnow(), "updatedAt": datetime.utcnow()},
            {"name": "Qualit√©", "location": "Messadine", "active": True, "createdAt": datetime.utcnow(), "updatedAt": datetime.utcnow()},
            {"name": "Logistique", "location": "Messadine", "active": True, "createdAt": datetime.utcnow(), "updatedAt": datetime.utcnow()},
            
            # Mateur
            {"name": "Maintenance", "location": "Mateur", "active": True, "createdAt": datetime.utcnow(), "updatedAt": datetime.utcnow()},
            {"name": "Production", "location": "Mateur", "active": True, "createdAt": datetime.utcnow(), "updatedAt": datetime.utcnow()},
            {"name": "RH", "location": "Mateur", "active": True, "createdAt": datetime.utcnow(), "updatedAt": datetime.utcnow()},
            
            # Menzel Hayet (Monastir)
            {"name": "Production", "location": "Menzel Hayet (Monastir)", "active": True, "createdAt": datetime.utcnow(), "updatedAt": datetime.utcnow()},
            {"name": "Qualit√©", "location": "Menzel Hayet (Monastir)", "active": True, "createdAt": datetime.utcnow(), "updatedAt": datetime.utcnow()},
            {"name": "Bureau d'√©tudes", "location": "Menzel Hayet (Monastir)", "active": True, "createdAt": datetime.utcnow(), "updatedAt": datetime.utcnow()},
        ]
        
        # Ins√©rer les nouveaux d√©partements
        print("üìù Cr√©ation des nouveaux d√©partements...")
        result = db.departments.insert_many(departments_data)
        print(f"‚úÖ {len(result.inserted_ids)} d√©partements cr√©√©s")
        
        # Afficher un r√©sum√©
        print("\nüìä R√©sum√© des d√©partements cr√©√©s :")
        locations = {}
        for dept in departments_data:
            location = dept['location']
            if location not in locations:
                locations[location] = []
            locations[location].append(dept['name'])
        
        for location, dept_names in locations.items():
            print(f"  üìç {location}: {', '.join(dept_names)}")
        
        # Mettre √† jour la collection users pour ajouter les champs location et department si n√©cessaire
        print("\nüîÑ V√©rification de la structure des utilisateurs...")
        sample_user = db.users.find_one()
        if sample_user:
            user_fields = list(sample_user.keys())
            if 'location' not in user_fields:
                print("‚ö†Ô∏è Champ 'location' manquant dans users - √† ajouter lors de l'inscription")
            if 'department' not in user_fields:
                print("‚ö†Ô∏è Champ 'department' manquant dans users - √† ajouter lors de l'inscription")
        
        print("\nüéâ Script termin√© avec succ√®s !")
        print("Les utilisateurs pourront maintenant :")
        print("1. S√©lectionner une localisation")
        print("2. Voir les d√©partements disponibles pour cette localisation")
        print("3. S'inscrire avec ces informations")
        
    except Exception as e:
        print(f"‚ùå Erreur : {e}")
        
    finally:
        if 'client' in locals():
            client.close()
            print("üîó Connexion MongoDB ferm√©e")

if __name__ == "__main__":
    main()
