#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script pour cr√©er la hi√©rarchie Leoni Tunisia dans MongoDB
- Locations (sites)
- Departments (d√©partements)
"""

from pymongo import MongoClient
from datetime import datetime
import os
import uuid
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

# Configuration MongoDB
MONGODB_ATLAS_URI = os.getenv('MONGODB_URI', 'mongodb+srv://oussamatrzd19:oussama123@leoniapp.grhnzgz.mongodb.net/LeoniApp')

def connect_to_mongodb():
    try:
        print("üîç Connexion √† MongoDB Atlas...")
        client = MongoClient(MONGODB_ATLAS_URI, serverSelectionTimeoutMS=10000)
        client.server_info()  # Test de connexion
        print("‚úÖ Connexion MongoDB Atlas r√©ussie")
        return client
    except Exception as e:
        print(f"‚ùå Erreur de connexion MongoDB: {e}")
        return None

def setup_leoni_hierarchy():
    """Cr√©er la hi√©rarchie Leoni Tunisia dans la base de donn√©es"""
    
    client = connect_to_mongodb()
    if not client:
        return False
    
    db = client['LeoniApp']
    locations_collection = db['locations']
    departments_collection = db['departments']
    
    print("\nüè¢ Configuration de la hi√©rarchie Leoni Tunisia")
    print("=" * 60)
    
    # 1. Cr√©er les locations (sites)
    print("\n1. Cr√©ation des sites (Locations)...")
    
    locations_data = [
        {
            "name": "Messadine",
            "code": "MESSADINE",
            "address": {
                "street": "Zone Industrielle Messadine",
                "city": "Messadine",
                "postalCode": "4054",
                "country": "Tunisia"
            },
            "isActive": True,
            "createdAt": datetime.utcnow(),
            "updatedAt": datetime.utcnow(),
            "adminUsers": [],
            "employeeCount": 0,
            "departmentCount": 0
        },
        {
            "name": "Mateur",
            "code": "MATEUR", 
            "address": {
                "street": "Zone Industrielle Mateur",
                "city": "Mateur",
                "postalCode": "7030",
                "country": "Tunisia"
            },
            "isActive": True,
            "createdAt": datetime.utcnow(),
            "updatedAt": datetime.utcnow(),
            "adminUsers": [],
            "employeeCount": 0,
            "departmentCount": 0
        },
        {
            "name": "Manzel Hayet (Monastir)",
            "code": "MONASTIR",
            "address": {
                "street": "Zone Industrielle Manzel Hayet",
                "city": "Monastir", 
                "postalCode": "5000",
                "country": "Tunisia"
            },
            "isActive": True,
            "createdAt": datetime.utcnow(),
            "updatedAt": datetime.utcnow(),
            "adminUsers": [],
            "employeeCount": 0,
            "departmentCount": 0
        }
    ]
    
    # Supprimer les anciennes locations si elles existent
    locations_collection.delete_many({})
    
    # Ins√©rer les nouvelles locations
    location_results = locations_collection.insert_many(locations_data)
    location_ids = location_results.inserted_ids
    
    print(f"   ‚úÖ {len(location_ids)} sites cr√©√©s")
    for i, location in enumerate(locations_data):
        print(f"      ‚Ä¢ {location['name']} ({location['code']})")
    
    # 2. Cr√©er les d√©partements pour chaque site
    print("\n2. Cr√©ation des d√©partements...")
    
    # D√©partements pour tous les sites (sauf Bureau d'√©tudes qui n'est que pour Monastir)
    standard_departments = [
        "Production",
        "Logistique", 
        "Qualit√©",
        "Maintenance",
        "RH",
        "Finance et Comptabilit√©",
        "Informatique",
        "S√©curit√©, Sant√© et Environnement",
        "Gestion de la cha√Æne de valeur"
    ]
    
    # Supprimer les anciens d√©partements
    departments_collection.delete_many({})
    
    # Cr√©er chaque d√©partement pour chaque site avec des UUIDs al√©atoirement g√©n√©r√©s
    all_departments = []
    
    for location_data in locations_data:
        for dept_name in standard_departments:
            department_doc = {
                "_id": str(uuid.uuid4()),  # UUID al√©atoirement g√©n√©r√©
                "name": dept_name,
                "location": location_data['name']
            }
            all_departments.append(department_doc)
        
        # Ajouter "Bureau d'√©tudes" uniquement pour Monastir
        if location_data['name'] == "Manzel Hayet (Monastir)":
            department_doc = {
                "_id": str(uuid.uuid4()),  # UUID al√©atoirement g√©n√©r√©
                "name": "Bureau d'√©tudes",
                "location": "Manzel Hayet (Monastir)"
            }
            all_departments.append(department_doc)
    # Ins√©rer tous les d√©partements
    dept_results = departments_collection.insert_many(all_departments)
    
    print(f"   ‚úÖ {len(dept_results.inserted_ids)} d√©partements cr√©√©s")
    print(f"      ‚Ä¢ {len(standard_departments)} d√©partements √ó {len(locations_data)} sites + Bureau d'√©tudes (Monastir)")
    
    # 3. Mettre √† jour le compteur de d√©partements dans les locations
    for location_id in location_ids:
        dept_count = len(standard_departments)
        if locations_data[location_ids.index(location_id)]['name'] == "Manzel Hayet (Monastir)":
            dept_count += 1  # +1 pour Bureau d'√©tudes
        
        locations_collection.update_one(
            {"_id": location_id},
            {"$set": {"departmentCount": dept_count}}
        )
    
    # 4. Cr√©er les index pour la performance
    print("\n3. Cr√©ation des index...")
    
    try:
        # Index pour locations
        locations_collection.create_index("code", unique=True)
        locations_collection.create_index("isActive")
        
        # Index pour departments (format simple)
        departments_collection.create_index([("name", 1), ("location", 1)], unique=True)
        departments_collection.create_index("location")
        
        print("   ‚úÖ Index cr√©√©s avec succ√®s")
    except Exception as e:
        print(f"   ‚ö†Ô∏è Index d√©j√† existants: {e}")
    
    # 5. R√©sum√©
    print("\nüìä R√©sum√© de la hi√©rarchie cr√©√©e:")
    print("=" * 60)
    print("üè¢ NIVEAU 1: Leoni Tunisia")
    print("üìç NIVEAU 2: Locations")
    for loc in locations_data:
        print(f"   ‚Ä¢ {loc['name']} ({loc['code']})")
    
    print("üè≠ NIVEAU 3: D√©partements (par site)")
    for dept_name in standard_departments:
        print(f"   ‚Ä¢ {dept_name}")
    print("   ‚Ä¢ Bureau d'√©tudes (Monastir uniquement)")
    
    print(f"\n‚úÖ Total: {len(locations_data)} sites √ó {len(standard_departments)} d√©partements + Bureau d'√©tudes (Monastir)")
    
    client.close()
    return True

if __name__ == "__main__":
    print("üöÄ Configuration de la hi√©rarchie Leoni Tunisia")
    print("=" * 60)
    
    success = setup_leoni_hierarchy()
    
    if success:
        print("\nüéâ Hi√©rarchie Leoni Tunisia configur√©e avec succ√®s !")
        print("Les utilisateurs peuvent maintenant s'inscrire avec:")
        print("‚Ä¢ Leur site (Messadine, Mateur, Monastir)")
        print("‚Ä¢ Leur d√©partement (Production, Logistique, Qualit√©, etc.)")
    else:
        print("\n‚ùå Erreur lors de la configuration")
