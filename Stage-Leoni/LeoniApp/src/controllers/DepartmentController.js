import LocationService from '../services/LocationService';
import { DepartmentModel } from '../models/DepartmentModel';

/**
 * Contr√¥leur pour g√©rer les d√©partements
 */
export class DepartmentController {
  constructor() {
    // LocationService utilise des m√©thodes statiques, pas besoin d'instanciation
  }

  /**
   * R√©cup√©rer tous les d√©partements
   * @returns {Promise<DepartmentModel[]>}
   */
  async getAllDepartments() {
    try {
      console.log('üè¢ DepartmentController: R√©cup√©ration de tous les d√©partements');
      
      const response = await LocationService.getAllDepartments();
      
      if (response.success && response.departments) {
        const departments = DepartmentModel.fromAPIArray(response.departments);
        console.log(`‚úÖ DepartmentController: ${departments.length} d√©partements r√©cup√©r√©s`);
        return departments;
      } else {
        console.warn('‚ö†Ô∏è DepartmentController: R√©ponse API invalide', response);
        return [];
      }
    } catch (error) {
      console.error('‚ùå DepartmentController: Erreur lors de la r√©cup√©ration des d√©partements:', error);
      throw new Error(`Erreur lors du chargement des d√©partements: ${error.message}`);
    }
  }

  /**
   * R√©cup√©rer les d√©partements d'une location sp√©cifique
   * @param {string} locationId 
   * @returns {Promise<DepartmentModel[]>}
   */
  async getDepartmentsByLocation(locationId) {
    try {
      if (!locationId) {
        console.warn('‚ö†Ô∏è DepartmentController: ID de location manquant');
        return [];
      }

      console.log(`üè¢ DepartmentController: R√©cup√©ration des d√©partements pour la location ${locationId}`);
      
      const response = await LocationService.getDepartmentsByLocation(locationId);
      
      if (response.success && response.departments) {
        console.log(`üîç DepartmentController: Donn√©es brutes re√ßues:`, response.departments);
        const departments = DepartmentModel.fromAPIArray(response.departments);
        console.log(`‚úÖ DepartmentController: ${departments.length} d√©partements r√©cup√©r√©s pour la location`);
        console.log(`üîç DepartmentController: Premier d√©partement transform√©:`, departments[0]);
        return departments;
      } else {
        console.warn('‚ö†Ô∏è DepartmentController: Aucun d√©partement trouv√© pour cette location', locationId);
        return [];
      }
    } catch (error) {
      console.error('‚ùå DepartmentController: Erreur lors de la r√©cup√©ration des d√©partements:', error);
      throw new Error(`Erreur lors du chargement des d√©partements: ${error.message}`);
    }
  }

  /**
   * R√©cup√©rer un d√©partement par son ID
   * @param {string} departmentId 
   * @returns {Promise<DepartmentModel|null>}
   */
  async getDepartmentById(departmentId) {
    try {
      if (!departmentId) {
        console.warn('‚ö†Ô∏è DepartmentController: ID de d√©partement manquant');
        return null;
      }

      console.log(`üè¢ DepartmentController: R√©cup√©ration du d√©partement ${departmentId}`);
      
      // Pour l'instant, on r√©cup√®re tous les d√©partements et on filtre
      // On pourrait am√©liorer cela avec un endpoint sp√©cifique
      const allDepartments = await this.getAllDepartments();
      const department = allDepartments.find(dept => dept.id === departmentId);
      
      if (department) {
        console.log(`‚úÖ DepartmentController: D√©partement ${department.name} r√©cup√©r√©`);
        return department;
      } else {
        console.warn('‚ö†Ô∏è DepartmentController: D√©partement non trouv√©', departmentId);
        return null;
      }
    } catch (error) {
      console.error('‚ùå DepartmentController: Erreur lors de la r√©cup√©ration du d√©partement:', error);
      throw new Error(`Erreur lors du chargement du d√©partement: ${error.message}`);
    }
  }

  /**
   * R√©cup√©rer les d√©partements actifs seulement
   * @param {string|null} locationId - Optionnel: filtrer par location
   * @returns {Promise<DepartmentModel[]>}
   */
  async getActiveDepartments(locationId = null) {
    try {
      let departments;
      
      if (locationId) {
        departments = await this.getDepartmentsByLocation(locationId);
      } else {
        departments = await this.getAllDepartments();
      }
      
      const activeDepartments = DepartmentModel.filterActive(departments);
      
      console.log(`‚úÖ DepartmentController: ${activeDepartments.length} d√©partements actifs sur ${departments.length}`);
      return activeDepartments;
    } catch (error) {
      console.error('‚ùå DepartmentController: Erreur lors de la r√©cup√©ration des d√©partements actifs:', error);
      throw error;
    }
  }

  /**
   * Formater les d√©partements pour un picker/dropdown
   * @param {string|null} locationId - Optionnel: filtrer par location
   * @returns {Promise<Array>}
   */
  async getDepartmentsForPicker(locationId = null) {
    try {
      const departments = await this.getActiveDepartments(locationId);
      const sortedDepartments = DepartmentModel.sortByName(departments);
      
      const pickerData = sortedDepartments.map(department => ({
        _id: department.id,
        name: department.getDisplayName(),
        code: department.code,
        locationId: department.locationRef || department.locationId,
        locationName: department.getLocationName()
      }));

      console.log(`‚úÖ DepartmentController: ${pickerData.length} d√©partements format√©s pour picker`);
      return pickerData;
    } catch (error) {
      console.error('‚ùå DepartmentController: Erreur lors du formatage pour picker:', error);
      return [];
    }
  }

  /**
   * Rechercher des d√©partements par nom
   * @param {string} searchTerm 
   * @param {string|null} locationId - Optionnel: filtrer par location
   * @returns {Promise<DepartmentModel[]>}
   */
  async searchDepartments(searchTerm, locationId = null) {
    try {
      if (!searchTerm || searchTerm.trim().length === 0) {
        return locationId ? 
          await this.getDepartmentsByLocation(locationId) : 
          await this.getAllDepartments();
      }

      const departments = locationId ? 
        await this.getDepartmentsByLocation(locationId) : 
        await this.getAllDepartments();
        
      const filteredDepartments = departments.filter(department =>
        department.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        department.code.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (department.description && department.description.toLowerCase().includes(searchTerm.toLowerCase()))
      );

      console.log(`üîç DepartmentController: ${filteredDepartments.length} d√©partements trouv√©s pour "${searchTerm}"`);
      return filteredDepartments;
    } catch (error) {
      console.error('‚ùå DepartmentController: Erreur lors de la recherche:', error);
      return [];
    }
  }

  /**
   * Valider les donn√©es d'un d√©partement
   * @param {Object} departmentData 
   * @returns {Object} {isValid, errors}
   */
  validateDepartmentData(departmentData) {
    const errors = [];

    if (!departmentData.name || departmentData.name.trim().length === 0) {
      errors.push('Le nom du d√©partement est obligatoire');
    }

    if (!departmentData.locationRef && !departmentData.locationId) {
      errors.push('Le site du d√©partement est obligatoire');
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * Grouper les d√©partements par location
   * @param {DepartmentModel[]} departments 
   * @returns {Object} D√©partements group√©s par location
   */
  groupDepartmentsByLocation(departments) {
    if (!Array.isArray(departments)) return {};

    const grouped = {};
    
    departments.forEach(department => {
      const locationKey = department.locationRef || department.locationId || 'unknown';
      const locationName = department.getLocationName();
      
      if (!grouped[locationKey]) {
        grouped[locationKey] = {
          locationId: locationKey,
          locationName: locationName,
          departments: []
        };
      }
      
      grouped[locationKey].departments.push(department);
    });

    // Trier les d√©partements dans chaque groupe
    Object.values(grouped).forEach(group => {
      group.departments = DepartmentModel.sortByName(group.departments);
    });

    console.log(`üìä DepartmentController: D√©partements group√©s en ${Object.keys(grouped).length} locations`);
    return grouped;
  }

  /**
   * Nettoyer le cache des d√©partements
   */
  clearCache() {
    console.log('üßπ DepartmentController: Cache des d√©partements nettoy√©');
    // Ici on pourrait impl√©menter un syst√®me de cache si n√©cessaire
  }
}

export default DepartmentController;
