// Service pour g√©rer les locations et d√©partements
import NetworkService from './NetworkService';

class LocationService {
    /**
     * R√©cup√©rer toutes les locations (sites)
     */
    static async getLocations() {
        try {
            console.log('üîç LocationService: Appel API GET locations...');
            
            const response = await NetworkService.fetch('/api/locations');
            console.log('üîç LocationService: Status =', response.status);
            
            const data = await response.json();
            console.log('üîç LocationService: R√©ponse =', data);
            
            if (data.success) {
                console.log('‚úÖ LocationService: Succ√®s, locations =', data.locations);
                return {
                    success: true,
                    locations: data.locations  // L'API retourne "locations", pas "data"
                };
            } else {
                console.log('‚ùå LocationService: √âchec =', data.message);
                return {
                    success: false,
                    message: data.message || 'Erreur lors de la r√©cup√©ration des sites'
                };
            }
        } catch (error) {
            console.error('‚ùå LocationService: Erreur fetch:', error);
            return {
                success: false,
                message: 'Erreur de connexion'
            };
        }
    }

    /**
     * R√©cup√©rer les d√©partements d'une location sp√©cifique par nom
     */
    static async getDepartmentsByLocationName(locationName) {
        try {
            console.log('üîç LocationService: R√©cup√©ration d√©partements pour location =', locationName);
            
            const response = await NetworkService.fetch('/api/departments');
            console.log('üîç LocationService: Status =', response.status);
            
            const data = await response.json();
            console.log('üîç LocationService: R√©ponse d√©partements =', data);
            
            if (data.departments) {
                // Filtrer les d√©partements par nom de location
                const filteredDepartments = data.departments.filter(dept => dept.location === locationName);
                console.log('‚úÖ LocationService: D√©partements filtr√©s =', filteredDepartments);
                return {
                    success: true,
                    departments: filteredDepartments
                };
            } else {
                console.log('‚ùå LocationService: Aucun d√©partement trouv√©');
                return {
                    success: false,
                    message: 'Aucun d√©partement trouv√©'
                };
            }
        } catch (error) {
            console.error('‚ùå LocationService: Exception d√©partements:', error);
            return {
                success: false,
                message: 'Erreur de connexion'
            };
        }
    }

    /**
     * R√©cup√©rer les d√©partements d'une location sp√©cifique
     */
    static async getDepartmentsByLocation(locationId) {
        try {
            console.log('üîç LocationService: R√©cup√©ration d√©partements pour locationId =', locationId);
            
            const response = await NetworkService.fetch(`/api/locations/${locationId}/departments`);
            console.log('üîç LocationService: Status =', response.status);
            
            const data = await response.json();
            console.log('üîç LocationService: R√©ponse d√©partements =', data);
            
            if (data.success) {
                console.log('‚úÖ LocationService: Succ√®s, d√©partements =', data.departments);
                return {
                    success: true,
                    departments: data.departments  // L'API retourne "departments"
                };
            } else {
                console.log('‚ùå LocationService: √âchec =', data.message);
                return {
                    success: false,
                    message: data.message || 'Erreur lors de la r√©cup√©ration des d√©partements'
                };
            }
        } catch (error) {
            console.error('‚ùå LocationService: Exception d√©partements:', error);
            return {
                success: false,
                message: 'Erreur de connexion'
            };
        }
    }

    /**
     * R√©cup√©rer tous les d√©partements (pour usage g√©n√©ral)
     */
    static async getAllDepartments() {
        try {
            const response = await NetworkService.fetch('/api/departments');
            const data = await response.json();
            
            if (data.success) {
                return {
                    success: true,
                    departments: data.data
                };
            } else {
                return {
                    success: false,
                    message: data.message || 'Erreur lors de la r√©cup√©ration des d√©partements'
                };
            }
        } catch (error) {
            console.error('Error fetching all departments:', error);
            return {
                success: false,
                message: 'Erreur de connexion'
            };
        }
    }

    /**
     * R√©cup√©rer une location sp√©cifique par son ID
     */
    static async getLocationById(locationId) {
        try {
            console.log(`üîç LocationService: R√©cup√©ration location ${locationId}`);
            
            const response = await NetworkService.fetch(`/api/locations/${locationId}`);
            const data = await response.json();
            
            if (data.success) {
                console.log('‚úÖ LocationService: Location r√©cup√©r√©e:', data.location);
                return {
                    success: true,
                    location: data.location
                };
            } else {
                console.log('‚ùå LocationService: Location non trouv√©e:', data.message);
                return {
                    success: false,
                    message: data.message || 'Location non trouv√©e'
                };
            }
        } catch (error) {
            console.error('‚ùå LocationService: Erreur fetch location:', error);
            return {
                success: false,
                message: 'Erreur de connexion'
            };
        }
    }
}

export default LocationService;
